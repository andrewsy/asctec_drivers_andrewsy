/* Auto-generated by genmsg_cpp for file /home/andrewsy/ros/starmac-ros-pkg/starmac_common/starmac_msgs/msg/EulerAngles.msg */
#ifndef STARMAC_MSGS_MESSAGE_EULERANGLES_H
#define STARMAC_MSGS_MESSAGE_EULERANGLES_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace starmac_msgs
{
template <class ContainerAllocator>
struct EulerAngles_ : public ros::Message
{
  typedef EulerAngles_<ContainerAllocator> Type;

  EulerAngles_()
  : sequence()
  , angles_in_degrees(false)
  , ai(0.0)
  , aj(0.0)
  , ak(0.0)
  {
  }

  EulerAngles_(const ContainerAllocator& _alloc)
  : sequence(_alloc)
  , angles_in_degrees(false)
  , ai(0.0)
  , aj(0.0)
  , ak(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sequence_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  sequence;

  typedef uint8_t _angles_in_degrees_type;
  uint8_t angles_in_degrees;

  typedef double _ai_type;
  double ai;

  typedef double _aj_type;
  double aj;

  typedef double _ak_type;
  double ak;


private:
  static const char* __s_getDataType_() { return "starmac_msgs/EulerAngles"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b41bea25ef0825fa6d2799746a51460f"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string sequence # as per transformations.py, e.g. 'rzyx' for standard yaw-pitch-roll\n\
bool angles_in_degrees # true if ai, aj, ak are in degrees, otherwise they are in radians\n\
# rotations about 1st, 2nd, 3rd axis:\n\
float64 ai\n\
float64 aj\n\
float64 ak\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, sequence);
    ros::serialization::serialize(stream, angles_in_degrees);
    ros::serialization::serialize(stream, ai);
    ros::serialization::serialize(stream, aj);
    ros::serialization::serialize(stream, ak);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, sequence);
    ros::serialization::deserialize(stream, angles_in_degrees);
    ros::serialization::deserialize(stream, ai);
    ros::serialization::deserialize(stream, aj);
    ros::serialization::deserialize(stream, ak);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(sequence);
    size += ros::serialization::serializationLength(angles_in_degrees);
    size += ros::serialization::serializationLength(ai);
    size += ros::serialization::serializationLength(aj);
    size += ros::serialization::serializationLength(ak);
    return size;
  }

  typedef boost::shared_ptr< ::starmac_msgs::EulerAngles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::starmac_msgs::EulerAngles_<ContainerAllocator>  const> ConstPtr;
}; // struct EulerAngles
typedef  ::starmac_msgs::EulerAngles_<std::allocator<void> > EulerAngles;

typedef boost::shared_ptr< ::starmac_msgs::EulerAngles> EulerAnglesPtr;
typedef boost::shared_ptr< ::starmac_msgs::EulerAngles const> EulerAnglesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::starmac_msgs::EulerAngles_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::starmac_msgs::EulerAngles_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace starmac_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::starmac_msgs::EulerAngles_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b41bea25ef0825fa6d2799746a51460f";
  }

  static const char* value(const  ::starmac_msgs::EulerAngles_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb41bea25ef0825faULL;
  static const uint64_t static_value2 = 0x6d2799746a51460fULL;
};

template<class ContainerAllocator>
struct DataType< ::starmac_msgs::EulerAngles_<ContainerAllocator> > {
  static const char* value() 
  {
    return "starmac_msgs/EulerAngles";
  }

  static const char* value(const  ::starmac_msgs::EulerAngles_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::starmac_msgs::EulerAngles_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string sequence # as per transformations.py, e.g. 'rzyx' for standard yaw-pitch-roll\n\
bool angles_in_degrees # true if ai, aj, ak are in degrees, otherwise they are in radians\n\
# rotations about 1st, 2nd, 3rd axis:\n\
float64 ai\n\
float64 aj\n\
float64 ak\n\
";
  }

  static const char* value(const  ::starmac_msgs::EulerAngles_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::starmac_msgs::EulerAngles_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.sequence);
    stream.next(m.angles_in_degrees);
    stream.next(m.ai);
    stream.next(m.aj);
    stream.next(m.ak);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EulerAngles_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::starmac_msgs::EulerAngles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::starmac_msgs::EulerAngles_<ContainerAllocator> & v) 
  {
    s << indent << "sequence: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sequence);
    s << indent << "angles_in_degrees: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.angles_in_degrees);
    s << indent << "ai: ";
    Printer<double>::stream(s, indent + "  ", v.ai);
    s << indent << "aj: ";
    Printer<double>::stream(s, indent + "  ", v.aj);
    s << indent << "ak: ";
    Printer<double>::stream(s, indent + "  ", v.ak);
  }
};


} // namespace message_operations
} // namespace ros

#endif // STARMAC_MSGS_MESSAGE_EULERANGLES_H

