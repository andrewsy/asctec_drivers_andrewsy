"""autogenerated by genmsg_py from control_mode_output.msg. Do not edit."""
import roslib.message
import struct

import std_msgs.msg

class control_mode_output(roslib.message.Message):
  _md5sum = "58192697145997c9f1076d3806892e40"
  _type = "flyer_controller/control_mode_output"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
string control_mode
bool motors_on
float64 roll_cmd # deg
float64 pitch_cmd # deg
bool direct_yaw_rate_commands # set true to send yaw rate commands, false to send yaw angle
float64 yaw_cmd # deg
float64 yaw_rate_cmd # deg/s
bool direct_thrust_commands # set true to send thrust directly
float64 alt_cmd # m - ignored if direct_thrust_commands = true
float64 thrust_cmd # N - ignored if direct_thrust_commands = false

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','control_mode','motors_on','roll_cmd','pitch_cmd','direct_yaw_rate_commands','yaw_cmd','yaw_rate_cmd','direct_thrust_commands','alt_cmd','thrust_cmd']
  _slot_types = ['Header','string','bool','float64','float64','bool','float64','float64','bool','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,control_mode,motors_on,roll_cmd,pitch_cmd,direct_yaw_rate_commands,yaw_cmd,yaw_rate_cmd,direct_thrust_commands,alt_cmd,thrust_cmd
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(control_mode_output, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.control_mode is None:
        self.control_mode = ''
      if self.motors_on is None:
        self.motors_on = False
      if self.roll_cmd is None:
        self.roll_cmd = 0.
      if self.pitch_cmd is None:
        self.pitch_cmd = 0.
      if self.direct_yaw_rate_commands is None:
        self.direct_yaw_rate_commands = False
      if self.yaw_cmd is None:
        self.yaw_cmd = 0.
      if self.yaw_rate_cmd is None:
        self.yaw_rate_cmd = 0.
      if self.direct_thrust_commands is None:
        self.direct_thrust_commands = False
      if self.alt_cmd is None:
        self.alt_cmd = 0.
      if self.thrust_cmd is None:
        self.thrust_cmd = 0.
    else:
      self.header = std_msgs.msg._Header.Header()
      self.control_mode = ''
      self.motors_on = False
      self.roll_cmd = 0.
      self.pitch_cmd = 0.
      self.direct_yaw_rate_commands = False
      self.yaw_cmd = 0.
      self.yaw_rate_cmd = 0.
      self.direct_thrust_commands = False
      self.alt_cmd = 0.
      self.thrust_cmd = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.control_mode
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2dB2dB2d.pack(_x.motors_on, _x.roll_cmd, _x.pitch_cmd, _x.direct_yaw_rate_commands, _x.yaw_cmd, _x.yaw_rate_cmd, _x.direct_thrust_commands, _x.alt_cmd, _x.thrust_cmd))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.control_mode = str[start:end]
      _x = self
      start = end
      end += 51
      (_x.motors_on, _x.roll_cmd, _x.pitch_cmd, _x.direct_yaw_rate_commands, _x.yaw_cmd, _x.yaw_rate_cmd, _x.direct_thrust_commands, _x.alt_cmd, _x.thrust_cmd,) = _struct_B2dB2dB2d.unpack(str[start:end])
      self.motors_on = bool(self.motors_on)
      self.direct_yaw_rate_commands = bool(self.direct_yaw_rate_commands)
      self.direct_thrust_commands = bool(self.direct_thrust_commands)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.control_mode
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2dB2dB2d.pack(_x.motors_on, _x.roll_cmd, _x.pitch_cmd, _x.direct_yaw_rate_commands, _x.yaw_cmd, _x.yaw_rate_cmd, _x.direct_thrust_commands, _x.alt_cmd, _x.thrust_cmd))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.control_mode = str[start:end]
      _x = self
      start = end
      end += 51
      (_x.motors_on, _x.roll_cmd, _x.pitch_cmd, _x.direct_yaw_rate_commands, _x.yaw_cmd, _x.yaw_rate_cmd, _x.direct_thrust_commands, _x.alt_cmd, _x.thrust_cmd,) = _struct_B2dB2dB2d.unpack(str[start:end])
      self.motors_on = bool(self.motors_on)
      self.direct_yaw_rate_commands = bool(self.direct_yaw_rate_commands)
      self.direct_thrust_commands = bool(self.direct_thrust_commands)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B2dB2dB2d = struct.Struct("<B2dB2dB2d")
_struct_3I = struct.Struct("<3I")
