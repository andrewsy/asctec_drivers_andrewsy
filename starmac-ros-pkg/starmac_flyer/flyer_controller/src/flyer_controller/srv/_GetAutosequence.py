"""autogenerated by genmsg_py from GetAutosequenceRequest.msg. Do not edit."""
import roslib.message
import struct


class GetAutosequenceRequest(roslib.message.Message):
  _md5sum = "e151b02d583602f1118d3887c7eb35c1"
  _type = "flyer_controller/GetAutosequenceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string autosequence_name

"""
  __slots__ = ['autosequence_name']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       autosequence_name
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GetAutosequenceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.autosequence_name is None:
        self.autosequence_name = ''
    else:
      self.autosequence_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.autosequence_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.autosequence_name = str[start:end]
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.autosequence_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.autosequence_name = str[start:end]
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
"""autogenerated by genmsg_py from GetAutosequenceResponse.msg. Do not edit."""
import roslib.message
import struct

import flyer_controller.msg

class GetAutosequenceResponse(roslib.message.Message):
  _md5sum = "73da6ef01f94f06da6a6ec5663bc40d8"
  _type = "flyer_controller/GetAutosequenceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool found
flyer_controller/Autosequence autosequence

================================================================================
MSG: flyer_controller/Autosequence
string name
uint32 num_points
flyer_controller/AutosequencePoint[] points
================================================================================
MSG: flyer_controller/AutosequencePoint
flyer_controller/HoverPoint hover_point
bool pause
================================================================================
MSG: flyer_controller/HoverPoint
string name
float64 x # [m] (North)
float64 y # [m] (East)
float64 alt # [m]
float64 yaw # [deg]
float64 vx # [m/s]
float64 vy # [m/s]
"""
  __slots__ = ['found','autosequence']
  _slot_types = ['bool','flyer_controller/Autosequence']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       found,autosequence
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GetAutosequenceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.found is None:
        self.found = False
      if self.autosequence is None:
        self.autosequence = flyer_controller.msg.Autosequence()
    else:
      self.found = False
      self.autosequence = flyer_controller.msg.Autosequence()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.found))
      _x = self.autosequence.name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.autosequence.num_points))
      length = len(self.autosequence.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.autosequence.points:
        _v1 = val1.hover_point
        _x = _v1.name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v1
        buff.write(_struct_6d.pack(_x.x, _x.y, _x.alt, _x.yaw, _x.vx, _x.vy))
        buff.write(_struct_B.pack(val1.pause))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.autosequence is None:
        self.autosequence = flyer_controller.msg.Autosequence()
      end = 0
      start = end
      end += 1
      (self.found,) = _struct_B.unpack(str[start:end])
      self.found = bool(self.found)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.autosequence.name = str[start:end]
      start = end
      end += 4
      (self.autosequence.num_points,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.autosequence.points = []
      for i in xrange(0, length):
        val1 = flyer_controller.msg.AutosequencePoint()
        _v2 = val1.hover_point
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v2.name = str[start:end]
        _x = _v2
        start = end
        end += 48
        (_x.x, _x.y, _x.alt, _x.yaw, _x.vx, _x.vy,) = _struct_6d.unpack(str[start:end])
        start = end
        end += 1
        (val1.pause,) = _struct_B.unpack(str[start:end])
        val1.pause = bool(val1.pause)
        self.autosequence.points.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.found))
      _x = self.autosequence.name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.autosequence.num_points))
      length = len(self.autosequence.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.autosequence.points:
        _v3 = val1.hover_point
        _x = _v3.name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v3
        buff.write(_struct_6d.pack(_x.x, _x.y, _x.alt, _x.yaw, _x.vx, _x.vy))
        buff.write(_struct_B.pack(val1.pause))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.autosequence is None:
        self.autosequence = flyer_controller.msg.Autosequence()
      end = 0
      start = end
      end += 1
      (self.found,) = _struct_B.unpack(str[start:end])
      self.found = bool(self.found)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.autosequence.name = str[start:end]
      start = end
      end += 4
      (self.autosequence.num_points,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.autosequence.points = []
      for i in xrange(0, length):
        val1 = flyer_controller.msg.AutosequencePoint()
        _v4 = val1.hover_point
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v4.name = str[start:end]
        _x = _v4
        start = end
        end += 48
        (_x.x, _x.y, _x.alt, _x.yaw, _x.vx, _x.vy,) = _struct_6d.unpack(str[start:end])
        start = end
        end += 1
        (val1.pause,) = _struct_B.unpack(str[start:end])
        val1.pause = bool(val1.pause)
        self.autosequence.points.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
_struct_6d = struct.Struct("<6d")
class GetAutosequence(roslib.message.ServiceDefinition):
  _type          = 'flyer_controller/GetAutosequence'
  _md5sum = 'afeb270411c0d7737154215bd6840afe'
  _request_class  = GetAutosequenceRequest
  _response_class = GetAutosequenceResponse
