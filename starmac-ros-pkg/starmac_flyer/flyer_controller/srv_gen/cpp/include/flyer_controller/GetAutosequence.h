/* Auto-generated by genmsg_cpp for file /home/andrewsy/ros/starmac-ros-pkg/starmac_flyer/flyer_controller/srv/GetAutosequence.srv */
#ifndef FLYER_CONTROLLER_SERVICE_GETAUTOSEQUENCE_H
#define FLYER_CONTROLLER_SERVICE_GETAUTOSEQUENCE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"



#include "flyer_controller/Autosequence.h"

namespace flyer_controller
{
template <class ContainerAllocator>
struct GetAutosequenceRequest_ : public ros::Message
{
  typedef GetAutosequenceRequest_<ContainerAllocator> Type;

  GetAutosequenceRequest_()
  : autosequence_name()
  {
  }

  GetAutosequenceRequest_(const ContainerAllocator& _alloc)
  : autosequence_name(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _autosequence_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  autosequence_name;


private:
  static const char* __s_getDataType_() { return "flyer_controller/GetAutosequenceRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "e151b02d583602f1118d3887c7eb35c1"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "afeb270411c0d7737154215bd6840afe"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string autosequence_name\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, autosequence_name);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, autosequence_name);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(autosequence_name);
    return size;
  }

  typedef boost::shared_ptr< ::flyer_controller::GetAutosequenceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flyer_controller::GetAutosequenceRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct GetAutosequenceRequest
typedef  ::flyer_controller::GetAutosequenceRequest_<std::allocator<void> > GetAutosequenceRequest;

typedef boost::shared_ptr< ::flyer_controller::GetAutosequenceRequest> GetAutosequenceRequestPtr;
typedef boost::shared_ptr< ::flyer_controller::GetAutosequenceRequest const> GetAutosequenceRequestConstPtr;


template <class ContainerAllocator>
struct GetAutosequenceResponse_ : public ros::Message
{
  typedef GetAutosequenceResponse_<ContainerAllocator> Type;

  GetAutosequenceResponse_()
  : found(false)
  , autosequence()
  {
  }

  GetAutosequenceResponse_(const ContainerAllocator& _alloc)
  : found(false)
  , autosequence(_alloc)
  {
  }

  typedef uint8_t _found_type;
  uint8_t found;

  typedef  ::flyer_controller::Autosequence_<ContainerAllocator>  _autosequence_type;
   ::flyer_controller::Autosequence_<ContainerAllocator>  autosequence;


private:
  static const char* __s_getDataType_() { return "flyer_controller/GetAutosequenceResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "73da6ef01f94f06da6a6ec5663bc40d8"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "afeb270411c0d7737154215bd6840afe"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool found\n\
flyer_controller/Autosequence autosequence\n\
\n\
================================================================================\n\
MSG: flyer_controller/Autosequence\n\
string name\n\
uint32 num_points\n\
flyer_controller/AutosequencePoint[] points\n\
================================================================================\n\
MSG: flyer_controller/AutosequencePoint\n\
flyer_controller/HoverPoint hover_point\n\
bool pause\n\
================================================================================\n\
MSG: flyer_controller/HoverPoint\n\
string name\n\
float64 x # [m] (North)\n\
float64 y # [m] (East)\n\
float64 alt # [m]\n\
float64 yaw # [deg]\n\
float64 vx # [m/s]\n\
float64 vy # [m/s]\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, found);
    ros::serialization::serialize(stream, autosequence);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, found);
    ros::serialization::deserialize(stream, autosequence);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(found);
    size += ros::serialization::serializationLength(autosequence);
    return size;
  }

  typedef boost::shared_ptr< ::flyer_controller::GetAutosequenceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flyer_controller::GetAutosequenceResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct GetAutosequenceResponse
typedef  ::flyer_controller::GetAutosequenceResponse_<std::allocator<void> > GetAutosequenceResponse;

typedef boost::shared_ptr< ::flyer_controller::GetAutosequenceResponse> GetAutosequenceResponsePtr;
typedef boost::shared_ptr< ::flyer_controller::GetAutosequenceResponse const> GetAutosequenceResponseConstPtr;

struct GetAutosequence
{

typedef GetAutosequenceRequest Request;
typedef GetAutosequenceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetAutosequence
} // namespace flyer_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::flyer_controller::GetAutosequenceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e151b02d583602f1118d3887c7eb35c1";
  }

  static const char* value(const  ::flyer_controller::GetAutosequenceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe151b02d583602f1ULL;
  static const uint64_t static_value2 = 0x118d3887c7eb35c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::flyer_controller::GetAutosequenceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flyer_controller/GetAutosequenceRequest";
  }

  static const char* value(const  ::flyer_controller::GetAutosequenceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::flyer_controller::GetAutosequenceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string autosequence_name\n\
\n\
";
  }

  static const char* value(const  ::flyer_controller::GetAutosequenceRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::flyer_controller::GetAutosequenceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "73da6ef01f94f06da6a6ec5663bc40d8";
  }

  static const char* value(const  ::flyer_controller::GetAutosequenceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x73da6ef01f94f06dULL;
  static const uint64_t static_value2 = 0xa6a6ec5663bc40d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::flyer_controller::GetAutosequenceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flyer_controller/GetAutosequenceResponse";
  }

  static const char* value(const  ::flyer_controller::GetAutosequenceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::flyer_controller::GetAutosequenceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool found\n\
flyer_controller/Autosequence autosequence\n\
\n\
================================================================================\n\
MSG: flyer_controller/Autosequence\n\
string name\n\
uint32 num_points\n\
flyer_controller/AutosequencePoint[] points\n\
================================================================================\n\
MSG: flyer_controller/AutosequencePoint\n\
flyer_controller/HoverPoint hover_point\n\
bool pause\n\
================================================================================\n\
MSG: flyer_controller/HoverPoint\n\
string name\n\
float64 x # [m] (North)\n\
float64 y # [m] (East)\n\
float64 alt # [m]\n\
float64 yaw # [deg]\n\
float64 vx # [m/s]\n\
float64 vy # [m/s]\n\
";
  }

  static const char* value(const  ::flyer_controller::GetAutosequenceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::flyer_controller::GetAutosequenceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.autosequence_name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetAutosequenceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::flyer_controller::GetAutosequenceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.found);
    stream.next(m.autosequence);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetAutosequenceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<flyer_controller::GetAutosequence> {
  static const char* value() 
  {
    return "afeb270411c0d7737154215bd6840afe";
  }

  static const char* value(const flyer_controller::GetAutosequence&) { return value(); } 
};

template<>
struct DataType<flyer_controller::GetAutosequence> {
  static const char* value() 
  {
    return "flyer_controller/GetAutosequence";
  }

  static const char* value(const flyer_controller::GetAutosequence&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<flyer_controller::GetAutosequenceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "afeb270411c0d7737154215bd6840afe";
  }

  static const char* value(const flyer_controller::GetAutosequenceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<flyer_controller::GetAutosequenceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flyer_controller/GetAutosequence";
  }

  static const char* value(const flyer_controller::GetAutosequenceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<flyer_controller::GetAutosequenceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "afeb270411c0d7737154215bd6840afe";
  }

  static const char* value(const flyer_controller::GetAutosequenceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<flyer_controller::GetAutosequenceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flyer_controller/GetAutosequence";
  }

  static const char* value(const flyer_controller::GetAutosequenceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FLYER_CONTROLLER_SERVICE_GETAUTOSEQUENCE_H

