/* Auto-generated by genmsg_cpp for file /home/andrewsy/ros/starmac-ros-pkg/starmac_flyer/flyer_controller/srv/control_modes.srv */
#ifndef FLYER_CONTROLLER_SERVICE_CONTROL_MODES_H
#define FLYER_CONTROLLER_SERVICE_CONTROL_MODES_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace flyer_controller
{
template <class ContainerAllocator>
struct control_modesRequest_ : public ros::Message
{
  typedef control_modesRequest_<ContainerAllocator> Type;

  control_modesRequest_()
  : request()
  {
  }

  control_modesRequest_(const ContainerAllocator& _alloc)
  : request(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _request_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  request;


private:
  static const char* __s_getDataType_() { return "flyer_controller/control_modesRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "9b13f31f7a0a36901919f7ec0d9f40d4"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "f9d56a6b456c1cfa47b023d486afffdb"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string request\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, request);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, request);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(request);
    return size;
  }

  typedef boost::shared_ptr< ::flyer_controller::control_modesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flyer_controller::control_modesRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct control_modesRequest
typedef  ::flyer_controller::control_modesRequest_<std::allocator<void> > control_modesRequest;

typedef boost::shared_ptr< ::flyer_controller::control_modesRequest> control_modesRequestPtr;
typedef boost::shared_ptr< ::flyer_controller::control_modesRequest const> control_modesRequestConstPtr;


template <class ContainerAllocator>
struct control_modesResponse_ : public ros::Message
{
  typedef control_modesResponse_<ContainerAllocator> Type;

  control_modesResponse_()
  : response()
  , reason()
  {
  }

  control_modesResponse_(const ContainerAllocator& _alloc)
  : response(_alloc)
  , reason(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _response_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  response;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reason_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  reason;


private:
  static const char* __s_getDataType_() { return "flyer_controller/control_modesResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "ed84a63181c25f7f35510f47c0dd2c86"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "f9d56a6b456c1cfa47b023d486afffdb"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string response\n\
string reason\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, response);
    ros::serialization::serialize(stream, reason);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, response);
    ros::serialization::deserialize(stream, reason);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(response);
    size += ros::serialization::serializationLength(reason);
    return size;
  }

  typedef boost::shared_ptr< ::flyer_controller::control_modesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flyer_controller::control_modesResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct control_modesResponse
typedef  ::flyer_controller::control_modesResponse_<std::allocator<void> > control_modesResponse;

typedef boost::shared_ptr< ::flyer_controller::control_modesResponse> control_modesResponsePtr;
typedef boost::shared_ptr< ::flyer_controller::control_modesResponse const> control_modesResponseConstPtr;

struct control_modes
{

typedef control_modesRequest Request;
typedef control_modesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct control_modes
} // namespace flyer_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::flyer_controller::control_modesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9b13f31f7a0a36901919f7ec0d9f40d4";
  }

  static const char* value(const  ::flyer_controller::control_modesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9b13f31f7a0a3690ULL;
  static const uint64_t static_value2 = 0x1919f7ec0d9f40d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::flyer_controller::control_modesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flyer_controller/control_modesRequest";
  }

  static const char* value(const  ::flyer_controller::control_modesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::flyer_controller::control_modesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string request\n\
\n\
";
  }

  static const char* value(const  ::flyer_controller::control_modesRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::flyer_controller::control_modesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ed84a63181c25f7f35510f47c0dd2c86";
  }

  static const char* value(const  ::flyer_controller::control_modesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xed84a63181c25f7fULL;
  static const uint64_t static_value2 = 0x35510f47c0dd2c86ULL;
};

template<class ContainerAllocator>
struct DataType< ::flyer_controller::control_modesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flyer_controller/control_modesResponse";
  }

  static const char* value(const  ::flyer_controller::control_modesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::flyer_controller::control_modesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string response\n\
string reason\n\
\n\
";
  }

  static const char* value(const  ::flyer_controller::control_modesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::flyer_controller::control_modesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.request);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct control_modesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::flyer_controller::control_modesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.response);
    stream.next(m.reason);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct control_modesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<flyer_controller::control_modes> {
  static const char* value() 
  {
    return "f9d56a6b456c1cfa47b023d486afffdb";
  }

  static const char* value(const flyer_controller::control_modes&) { return value(); } 
};

template<>
struct DataType<flyer_controller::control_modes> {
  static const char* value() 
  {
    return "flyer_controller/control_modes";
  }

  static const char* value(const flyer_controller::control_modes&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<flyer_controller::control_modesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f9d56a6b456c1cfa47b023d486afffdb";
  }

  static const char* value(const flyer_controller::control_modesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<flyer_controller::control_modesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flyer_controller/control_modes";
  }

  static const char* value(const flyer_controller::control_modesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<flyer_controller::control_modesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f9d56a6b456c1cfa47b023d486afffdb";
  }

  static const char* value(const flyer_controller::control_modesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<flyer_controller::control_modesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flyer_controller/control_modes";
  }

  static const char* value(const flyer_controller::control_modesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FLYER_CONTROLLER_SERVICE_CONTROL_MODES_H

