/* Auto-generated by genmsg_cpp for file /home/andrewsy/ros/starmac-ros-pkg/starmac_flyer/flyer_controller/msg/AutosequencePoint.msg */
#ifndef FLYER_CONTROLLER_MESSAGE_AUTOSEQUENCEPOINT_H
#define FLYER_CONTROLLER_MESSAGE_AUTOSEQUENCEPOINT_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "flyer_controller/HoverPoint.h"

namespace flyer_controller
{
template <class ContainerAllocator>
struct AutosequencePoint_ : public ros::Message
{
  typedef AutosequencePoint_<ContainerAllocator> Type;

  AutosequencePoint_()
  : hover_point()
  , pause(false)
  {
  }

  AutosequencePoint_(const ContainerAllocator& _alloc)
  : hover_point(_alloc)
  , pause(false)
  {
  }

  typedef  ::flyer_controller::HoverPoint_<ContainerAllocator>  _hover_point_type;
   ::flyer_controller::HoverPoint_<ContainerAllocator>  hover_point;

  typedef uint8_t _pause_type;
  uint8_t pause;


private:
  static const char* __s_getDataType_() { return "flyer_controller/AutosequencePoint"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c397fd5685c6ff6ca05d78fa239709a5"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "flyer_controller/HoverPoint hover_point\n\
bool pause\n\
================================================================================\n\
MSG: flyer_controller/HoverPoint\n\
string name\n\
float64 x # [m] (North)\n\
float64 y # [m] (East)\n\
float64 alt # [m]\n\
float64 yaw # [deg]\n\
float64 vx # [m/s]\n\
float64 vy # [m/s]\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, hover_point);
    ros::serialization::serialize(stream, pause);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, hover_point);
    ros::serialization::deserialize(stream, pause);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(hover_point);
    size += ros::serialization::serializationLength(pause);
    return size;
  }

  typedef boost::shared_ptr< ::flyer_controller::AutosequencePoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flyer_controller::AutosequencePoint_<ContainerAllocator>  const> ConstPtr;
}; // struct AutosequencePoint
typedef  ::flyer_controller::AutosequencePoint_<std::allocator<void> > AutosequencePoint;

typedef boost::shared_ptr< ::flyer_controller::AutosequencePoint> AutosequencePointPtr;
typedef boost::shared_ptr< ::flyer_controller::AutosequencePoint const> AutosequencePointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::flyer_controller::AutosequencePoint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::flyer_controller::AutosequencePoint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace flyer_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::flyer_controller::AutosequencePoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c397fd5685c6ff6ca05d78fa239709a5";
  }

  static const char* value(const  ::flyer_controller::AutosequencePoint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc397fd5685c6ff6cULL;
  static const uint64_t static_value2 = 0xa05d78fa239709a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::flyer_controller::AutosequencePoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flyer_controller/AutosequencePoint";
  }

  static const char* value(const  ::flyer_controller::AutosequencePoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::flyer_controller::AutosequencePoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flyer_controller/HoverPoint hover_point\n\
bool pause\n\
================================================================================\n\
MSG: flyer_controller/HoverPoint\n\
string name\n\
float64 x # [m] (North)\n\
float64 y # [m] (East)\n\
float64 alt # [m]\n\
float64 yaw # [deg]\n\
float64 vx # [m/s]\n\
float64 vy # [m/s]\n\
";
  }

  static const char* value(const  ::flyer_controller::AutosequencePoint_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::flyer_controller::AutosequencePoint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.hover_point);
    stream.next(m.pause);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AutosequencePoint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flyer_controller::AutosequencePoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::flyer_controller::AutosequencePoint_<ContainerAllocator> & v) 
  {
    s << indent << "hover_point: ";
s << std::endl;
    Printer< ::flyer_controller::HoverPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.hover_point);
    s << indent << "pause: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pause);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FLYER_CONTROLLER_MESSAGE_AUTOSEQUENCEPOINT_H

