/* Auto-generated by genmsg_cpp for file /home/andrewsy/ros/starmac-ros-pkg/starmac_flyer/flyer_controller/msg/control_mode_output.msg */
#ifndef FLYER_CONTROLLER_MESSAGE_CONTROL_MODE_OUTPUT_H
#define FLYER_CONTROLLER_MESSAGE_CONTROL_MODE_OUTPUT_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "std_msgs/Header.h"

namespace flyer_controller
{
template <class ContainerAllocator>
struct control_mode_output_ : public ros::Message
{
  typedef control_mode_output_<ContainerAllocator> Type;

  control_mode_output_()
  : header()
  , control_mode()
  , motors_on(false)
  , roll_cmd(0.0)
  , pitch_cmd(0.0)
  , direct_yaw_rate_commands(false)
  , yaw_cmd(0.0)
  , yaw_rate_cmd(0.0)
  , direct_thrust_commands(false)
  , alt_cmd(0.0)
  , thrust_cmd(0.0)
  {
  }

  control_mode_output_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , control_mode(_alloc)
  , motors_on(false)
  , roll_cmd(0.0)
  , pitch_cmd(0.0)
  , direct_yaw_rate_commands(false)
  , yaw_cmd(0.0)
  , yaw_rate_cmd(0.0)
  , direct_thrust_commands(false)
  , alt_cmd(0.0)
  , thrust_cmd(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _control_mode_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  control_mode;

  typedef uint8_t _motors_on_type;
  uint8_t motors_on;

  typedef double _roll_cmd_type;
  double roll_cmd;

  typedef double _pitch_cmd_type;
  double pitch_cmd;

  typedef uint8_t _direct_yaw_rate_commands_type;
  uint8_t direct_yaw_rate_commands;

  typedef double _yaw_cmd_type;
  double yaw_cmd;

  typedef double _yaw_rate_cmd_type;
  double yaw_rate_cmd;

  typedef uint8_t _direct_thrust_commands_type;
  uint8_t direct_thrust_commands;

  typedef double _alt_cmd_type;
  double alt_cmd;

  typedef double _thrust_cmd_type;
  double thrust_cmd;


private:
  static const char* __s_getDataType_() { return "flyer_controller/control_mode_output"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "58192697145997c9f1076d3806892e40"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
string control_mode\n\
bool motors_on\n\
float64 roll_cmd # deg\n\
float64 pitch_cmd # deg\n\
bool direct_yaw_rate_commands # set true to send yaw rate commands, false to send yaw angle\n\
float64 yaw_cmd # deg\n\
float64 yaw_rate_cmd # deg/s\n\
bool direct_thrust_commands # set true to send thrust directly\n\
float64 alt_cmd # m - ignored if direct_thrust_commands = true\n\
float64 thrust_cmd # N - ignored if direct_thrust_commands = false\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, control_mode);
    ros::serialization::serialize(stream, motors_on);
    ros::serialization::serialize(stream, roll_cmd);
    ros::serialization::serialize(stream, pitch_cmd);
    ros::serialization::serialize(stream, direct_yaw_rate_commands);
    ros::serialization::serialize(stream, yaw_cmd);
    ros::serialization::serialize(stream, yaw_rate_cmd);
    ros::serialization::serialize(stream, direct_thrust_commands);
    ros::serialization::serialize(stream, alt_cmd);
    ros::serialization::serialize(stream, thrust_cmd);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, control_mode);
    ros::serialization::deserialize(stream, motors_on);
    ros::serialization::deserialize(stream, roll_cmd);
    ros::serialization::deserialize(stream, pitch_cmd);
    ros::serialization::deserialize(stream, direct_yaw_rate_commands);
    ros::serialization::deserialize(stream, yaw_cmd);
    ros::serialization::deserialize(stream, yaw_rate_cmd);
    ros::serialization::deserialize(stream, direct_thrust_commands);
    ros::serialization::deserialize(stream, alt_cmd);
    ros::serialization::deserialize(stream, thrust_cmd);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(control_mode);
    size += ros::serialization::serializationLength(motors_on);
    size += ros::serialization::serializationLength(roll_cmd);
    size += ros::serialization::serializationLength(pitch_cmd);
    size += ros::serialization::serializationLength(direct_yaw_rate_commands);
    size += ros::serialization::serializationLength(yaw_cmd);
    size += ros::serialization::serializationLength(yaw_rate_cmd);
    size += ros::serialization::serializationLength(direct_thrust_commands);
    size += ros::serialization::serializationLength(alt_cmd);
    size += ros::serialization::serializationLength(thrust_cmd);
    return size;
  }

  typedef boost::shared_ptr< ::flyer_controller::control_mode_output_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flyer_controller::control_mode_output_<ContainerAllocator>  const> ConstPtr;
}; // struct control_mode_output
typedef  ::flyer_controller::control_mode_output_<std::allocator<void> > control_mode_output;

typedef boost::shared_ptr< ::flyer_controller::control_mode_output> control_mode_outputPtr;
typedef boost::shared_ptr< ::flyer_controller::control_mode_output const> control_mode_outputConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::flyer_controller::control_mode_output_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::flyer_controller::control_mode_output_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace flyer_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::flyer_controller::control_mode_output_<ContainerAllocator> > {
  static const char* value() 
  {
    return "58192697145997c9f1076d3806892e40";
  }

  static const char* value(const  ::flyer_controller::control_mode_output_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x58192697145997c9ULL;
  static const uint64_t static_value2 = 0xf1076d3806892e40ULL;
};

template<class ContainerAllocator>
struct DataType< ::flyer_controller::control_mode_output_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flyer_controller/control_mode_output";
  }

  static const char* value(const  ::flyer_controller::control_mode_output_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::flyer_controller::control_mode_output_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
string control_mode\n\
bool motors_on\n\
float64 roll_cmd # deg\n\
float64 pitch_cmd # deg\n\
bool direct_yaw_rate_commands # set true to send yaw rate commands, false to send yaw angle\n\
float64 yaw_cmd # deg\n\
float64 yaw_rate_cmd # deg/s\n\
bool direct_thrust_commands # set true to send thrust directly\n\
float64 alt_cmd # m - ignored if direct_thrust_commands = true\n\
float64 thrust_cmd # N - ignored if direct_thrust_commands = false\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::flyer_controller::control_mode_output_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::flyer_controller::control_mode_output_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::flyer_controller::control_mode_output_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::flyer_controller::control_mode_output_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.control_mode);
    stream.next(m.motors_on);
    stream.next(m.roll_cmd);
    stream.next(m.pitch_cmd);
    stream.next(m.direct_yaw_rate_commands);
    stream.next(m.yaw_cmd);
    stream.next(m.yaw_rate_cmd);
    stream.next(m.direct_thrust_commands);
    stream.next(m.alt_cmd);
    stream.next(m.thrust_cmd);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct control_mode_output_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flyer_controller::control_mode_output_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::flyer_controller::control_mode_output_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "control_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.control_mode);
    s << indent << "motors_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motors_on);
    s << indent << "roll_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.roll_cmd);
    s << indent << "pitch_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_cmd);
    s << indent << "direct_yaw_rate_commands: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.direct_yaw_rate_commands);
    s << indent << "yaw_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_cmd);
    s << indent << "yaw_rate_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate_cmd);
    s << indent << "direct_thrust_commands: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.direct_thrust_commands);
    s << indent << "alt_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.alt_cmd);
    s << indent << "thrust_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.thrust_cmd);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FLYER_CONTROLLER_MESSAGE_CONTROL_MODE_OUTPUT_H

