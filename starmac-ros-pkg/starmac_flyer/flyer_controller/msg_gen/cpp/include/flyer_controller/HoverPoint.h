/* Auto-generated by genmsg_cpp for file /home/andrewsy/ros/starmac-ros-pkg/starmac_flyer/flyer_controller/msg/HoverPoint.msg */
#ifndef FLYER_CONTROLLER_MESSAGE_HOVERPOINT_H
#define FLYER_CONTROLLER_MESSAGE_HOVERPOINT_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace flyer_controller
{
template <class ContainerAllocator>
struct HoverPoint_ : public ros::Message
{
  typedef HoverPoint_<ContainerAllocator> Type;

  HoverPoint_()
  : name()
  , x(0.0)
  , y(0.0)
  , alt(0.0)
  , yaw(0.0)
  , vx(0.0)
  , vy(0.0)
  {
  }

  HoverPoint_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , x(0.0)
  , y(0.0)
  , alt(0.0)
  , yaw(0.0)
  , vx(0.0)
  , vy(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _alt_type;
  double alt;

  typedef double _yaw_type;
  double yaw;

  typedef double _vx_type;
  double vx;

  typedef double _vy_type;
  double vy;


private:
  static const char* __s_getDataType_() { return "flyer_controller/HoverPoint"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "08bfd1a92b1f014382750e5b743b63a9"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string name\n\
float64 x # [m] (North)\n\
float64 y # [m] (East)\n\
float64 alt # [m]\n\
float64 yaw # [deg]\n\
float64 vx # [m/s]\n\
float64 vy # [m/s]\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, name);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, y);
    ros::serialization::serialize(stream, alt);
    ros::serialization::serialize(stream, yaw);
    ros::serialization::serialize(stream, vx);
    ros::serialization::serialize(stream, vy);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, name);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, y);
    ros::serialization::deserialize(stream, alt);
    ros::serialization::deserialize(stream, yaw);
    ros::serialization::deserialize(stream, vx);
    ros::serialization::deserialize(stream, vy);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(name);
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(y);
    size += ros::serialization::serializationLength(alt);
    size += ros::serialization::serializationLength(yaw);
    size += ros::serialization::serializationLength(vx);
    size += ros::serialization::serializationLength(vy);
    return size;
  }

  typedef boost::shared_ptr< ::flyer_controller::HoverPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flyer_controller::HoverPoint_<ContainerAllocator>  const> ConstPtr;
}; // struct HoverPoint
typedef  ::flyer_controller::HoverPoint_<std::allocator<void> > HoverPoint;

typedef boost::shared_ptr< ::flyer_controller::HoverPoint> HoverPointPtr;
typedef boost::shared_ptr< ::flyer_controller::HoverPoint const> HoverPointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::flyer_controller::HoverPoint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::flyer_controller::HoverPoint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace flyer_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::flyer_controller::HoverPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "08bfd1a92b1f014382750e5b743b63a9";
  }

  static const char* value(const  ::flyer_controller::HoverPoint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x08bfd1a92b1f0143ULL;
  static const uint64_t static_value2 = 0x82750e5b743b63a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::flyer_controller::HoverPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "flyer_controller/HoverPoint";
  }

  static const char* value(const  ::flyer_controller::HoverPoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::flyer_controller::HoverPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
float64 x # [m] (North)\n\
float64 y # [m] (East)\n\
float64 alt # [m]\n\
float64 yaw # [deg]\n\
float64 vx # [m/s]\n\
float64 vy # [m/s]\n\
";
  }

  static const char* value(const  ::flyer_controller::HoverPoint_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::flyer_controller::HoverPoint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.alt);
    stream.next(m.yaw);
    stream.next(m.vx);
    stream.next(m.vy);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HoverPoint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flyer_controller::HoverPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::flyer_controller::HoverPoint_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "alt: ";
    Printer<double>::stream(s, indent + "  ", v.alt);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FLYER_CONTROLLER_MESSAGE_HOVERPOINT_H

