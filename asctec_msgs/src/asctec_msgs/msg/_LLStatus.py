"""autogenerated by genmsg_py from LLStatus.msg. Do not edit."""
import roslib.message
import struct


class LLStatus(roslib.message.Message):
  _md5sum = "2b44d15e58f4c5af0047794df9b66a84"
  _type = "asctec_msgs/LLStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# battery voltages in mV
int16 battery_voltage_1
int16 battery_voltage_2
# dont care
int16 status
# Controller cycles per second (should be about 1000)
int16 cpu_load
# dont care
int8 compass_enabled
int8 chksum_error
int8 flying
int8 motors_on
int16 flightMode
# Time motors are turning
int16 up_time


"""
  __slots__ = ['battery_voltage_1','battery_voltage_2','status','cpu_load','compass_enabled','chksum_error','flying','motors_on','flightMode','up_time']
  _slot_types = ['int16','int16','int16','int16','int8','int8','int8','int8','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       battery_voltage_1,battery_voltage_2,status,cpu_load,compass_enabled,chksum_error,flying,motors_on,flightMode,up_time
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(LLStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.battery_voltage_1 is None:
        self.battery_voltage_1 = 0
      if self.battery_voltage_2 is None:
        self.battery_voltage_2 = 0
      if self.status is None:
        self.status = 0
      if self.cpu_load is None:
        self.cpu_load = 0
      if self.compass_enabled is None:
        self.compass_enabled = 0
      if self.chksum_error is None:
        self.chksum_error = 0
      if self.flying is None:
        self.flying = 0
      if self.motors_on is None:
        self.motors_on = 0
      if self.flightMode is None:
        self.flightMode = 0
      if self.up_time is None:
        self.up_time = 0
    else:
      self.battery_voltage_1 = 0
      self.battery_voltage_2 = 0
      self.status = 0
      self.cpu_load = 0
      self.compass_enabled = 0
      self.chksum_error = 0
      self.flying = 0
      self.motors_on = 0
      self.flightMode = 0
      self.up_time = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_4h4b2h.pack(_x.battery_voltage_1, _x.battery_voltage_2, _x.status, _x.cpu_load, _x.compass_enabled, _x.chksum_error, _x.flying, _x.motors_on, _x.flightMode, _x.up_time))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.battery_voltage_1, _x.battery_voltage_2, _x.status, _x.cpu_load, _x.compass_enabled, _x.chksum_error, _x.flying, _x.motors_on, _x.flightMode, _x.up_time,) = _struct_4h4b2h.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_4h4b2h.pack(_x.battery_voltage_1, _x.battery_voltage_2, _x.status, _x.cpu_load, _x.compass_enabled, _x.chksum_error, _x.flying, _x.motors_on, _x.flightMode, _x.up_time))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.battery_voltage_1, _x.battery_voltage_2, _x.status, _x.cpu_load, _x.compass_enabled, _x.chksum_error, _x.flying, _x.motors_on, _x.flightMode, _x.up_time,) = _struct_4h4b2h.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4h4b2h = struct.Struct("<4h4b2h")
