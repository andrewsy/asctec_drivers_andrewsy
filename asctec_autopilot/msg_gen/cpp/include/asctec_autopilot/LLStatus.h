/* Auto-generated by genmsg_cpp for file /home/lucid/ros/stacks/ccny-ros-pkg/asctec_drivers/asctec_autopilot/msg/LLStatus.msg */
#ifndef ASCTEC_AUTOPILOT_MESSAGE_LLSTATUS_H
#define ASCTEC_AUTOPILOT_MESSAGE_LLSTATUS_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace asctec_autopilot
{
template <class ContainerAllocator>
struct LLStatus_ : public ros::Message
{
  typedef LLStatus_<ContainerAllocator> Type;

  LLStatus_()
  : battery_voltage_1(0)
  , battery_voltage_2(0)
  , status(0)
  , cpu_load(0)
  , compass_enabled(0)
  , chksum_error(0)
  , flying(0)
  , motors_on(0)
  , flightMode(0)
  , up_time(0)
  {
  }

  LLStatus_(const ContainerAllocator& _alloc)
  : battery_voltage_1(0)
  , battery_voltage_2(0)
  , status(0)
  , cpu_load(0)
  , compass_enabled(0)
  , chksum_error(0)
  , flying(0)
  , motors_on(0)
  , flightMode(0)
  , up_time(0)
  {
  }

  typedef int16_t _battery_voltage_1_type;
  int16_t battery_voltage_1;

  typedef int16_t _battery_voltage_2_type;
  int16_t battery_voltage_2;

  typedef int16_t _status_type;
  int16_t status;

  typedef int16_t _cpu_load_type;
  int16_t cpu_load;

  typedef int8_t _compass_enabled_type;
  int8_t compass_enabled;

  typedef int8_t _chksum_error_type;
  int8_t chksum_error;

  typedef int8_t _flying_type;
  int8_t flying;

  typedef int8_t _motors_on_type;
  int8_t motors_on;

  typedef int16_t _flightMode_type;
  int16_t flightMode;

  typedef int16_t _up_time_type;
  int16_t up_time;


private:
  static const char* __s_getDataType_() { return "asctec_autopilot/LLStatus"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "2b44d15e58f4c5af0047794df9b66a84"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# battery voltages in mV\n\
int16 battery_voltage_1\n\
int16 battery_voltage_2\n\
# dont care\n\
int16 status\n\
# Controller cycles per second (should be about 1000)\n\
int16 cpu_load\n\
# dont care\n\
int8 compass_enabled\n\
int8 chksum_error\n\
int8 flying\n\
int8 motors_on\n\
int16 flightMode\n\
# Time motors are turning\n\
int16 up_time\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, battery_voltage_1);
    ros::serialization::serialize(stream, battery_voltage_2);
    ros::serialization::serialize(stream, status);
    ros::serialization::serialize(stream, cpu_load);
    ros::serialization::serialize(stream, compass_enabled);
    ros::serialization::serialize(stream, chksum_error);
    ros::serialization::serialize(stream, flying);
    ros::serialization::serialize(stream, motors_on);
    ros::serialization::serialize(stream, flightMode);
    ros::serialization::serialize(stream, up_time);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, battery_voltage_1);
    ros::serialization::deserialize(stream, battery_voltage_2);
    ros::serialization::deserialize(stream, status);
    ros::serialization::deserialize(stream, cpu_load);
    ros::serialization::deserialize(stream, compass_enabled);
    ros::serialization::deserialize(stream, chksum_error);
    ros::serialization::deserialize(stream, flying);
    ros::serialization::deserialize(stream, motors_on);
    ros::serialization::deserialize(stream, flightMode);
    ros::serialization::deserialize(stream, up_time);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(battery_voltage_1);
    size += ros::serialization::serializationLength(battery_voltage_2);
    size += ros::serialization::serializationLength(status);
    size += ros::serialization::serializationLength(cpu_load);
    size += ros::serialization::serializationLength(compass_enabled);
    size += ros::serialization::serializationLength(chksum_error);
    size += ros::serialization::serializationLength(flying);
    size += ros::serialization::serializationLength(motors_on);
    size += ros::serialization::serializationLength(flightMode);
    size += ros::serialization::serializationLength(up_time);
    return size;
  }

  typedef boost::shared_ptr< ::asctec_autopilot::LLStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asctec_autopilot::LLStatus_<ContainerAllocator>  const> ConstPtr;
}; // struct LLStatus
typedef  ::asctec_autopilot::LLStatus_<std::allocator<void> > LLStatus;

typedef boost::shared_ptr< ::asctec_autopilot::LLStatus> LLStatusPtr;
typedef boost::shared_ptr< ::asctec_autopilot::LLStatus const> LLStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::asctec_autopilot::LLStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::asctec_autopilot::LLStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace asctec_autopilot

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::asctec_autopilot::LLStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2b44d15e58f4c5af0047794df9b66a84";
  }

  static const char* value(const  ::asctec_autopilot::LLStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2b44d15e58f4c5afULL;
  static const uint64_t static_value2 = 0x0047794df9b66a84ULL;
};

template<class ContainerAllocator>
struct DataType< ::asctec_autopilot::LLStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "asctec_autopilot/LLStatus";
  }

  static const char* value(const  ::asctec_autopilot::LLStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::asctec_autopilot::LLStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# battery voltages in mV\n\
int16 battery_voltage_1\n\
int16 battery_voltage_2\n\
# dont care\n\
int16 status\n\
# Controller cycles per second (should be about 1000)\n\
int16 cpu_load\n\
# dont care\n\
int8 compass_enabled\n\
int8 chksum_error\n\
int8 flying\n\
int8 motors_on\n\
int16 flightMode\n\
# Time motors are turning\n\
int16 up_time\n\
\n\
\n\
";
  }

  static const char* value(const  ::asctec_autopilot::LLStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::asctec_autopilot::LLStatus_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::asctec_autopilot::LLStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.battery_voltage_1);
    stream.next(m.battery_voltage_2);
    stream.next(m.status);
    stream.next(m.cpu_load);
    stream.next(m.compass_enabled);
    stream.next(m.chksum_error);
    stream.next(m.flying);
    stream.next(m.motors_on);
    stream.next(m.flightMode);
    stream.next(m.up_time);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LLStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asctec_autopilot::LLStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::asctec_autopilot::LLStatus_<ContainerAllocator> & v) 
  {
    s << indent << "battery_voltage_1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.battery_voltage_1);
    s << indent << "battery_voltage_2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.battery_voltage_2);
    s << indent << "status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.status);
    s << indent << "cpu_load: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cpu_load);
    s << indent << "compass_enabled: ";
    Printer<int8_t>::stream(s, indent + "  ", v.compass_enabled);
    s << indent << "chksum_error: ";
    Printer<int8_t>::stream(s, indent + "  ", v.chksum_error);
    s << indent << "flying: ";
    Printer<int8_t>::stream(s, indent + "  ", v.flying);
    s << indent << "motors_on: ";
    Printer<int8_t>::stream(s, indent + "  ", v.motors_on);
    s << indent << "flightMode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.flightMode);
    s << indent << "up_time: ";
    Printer<int16_t>::stream(s, indent + "  ", v.up_time);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ASCTEC_AUTOPILOT_MESSAGE_LLSTATUS_H

